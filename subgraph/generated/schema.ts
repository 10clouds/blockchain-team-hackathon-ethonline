// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BreakupApproved extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BreakupApproved entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BreakupApproved must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BreakupApproved", id.toString(), this);
    }
  }

  static load(id: string): BreakupApproved | null {
    return changetype<BreakupApproved | null>(store.get("BreakupApproved", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get relationshipId(): Bytes {
    let value = this.get("relationshipId");
    return value!.toBytes();
  }

  set relationshipId(value: Bytes) {
    this.set("relationshipId", Value.fromBytes(value));
  }

  get initiator(): Bytes {
    let value = this.get("initiator");
    return value!.toBytes();
  }

  set initiator(value: Bytes) {
    this.set("initiator", Value.fromBytes(value));
  }

  get approver(): Bytes {
    let value = this.get("approver");
    return value!.toBytes();
  }

  set approver(value: Bytes) {
    this.set("approver", Value.fromBytes(value));
  }
}

export class BreakupProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BreakupProposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BreakupProposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BreakupProposal", id.toString(), this);
    }
  }

  static load(id: string): BreakupProposal | null {
    return changetype<BreakupProposal | null>(store.get("BreakupProposal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get relationshipId(): Bytes {
    let value = this.get("relationshipId");
    return value!.toBytes();
  }

  set relationshipId(value: Bytes) {
    this.set("relationshipId", Value.fromBytes(value));
  }

  get initiator(): Bytes {
    let value = this.get("initiator");
    return value!.toBytes();
  }

  set initiator(value: Bytes) {
    this.set("initiator", Value.fromBytes(value));
  }
}

export class RelationshipApproved extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RelationshipApproved entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RelationshipApproved must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RelationshipApproved", id.toString(), this);
    }
  }

  static load(id: string): RelationshipApproved | null {
    return changetype<RelationshipApproved | null>(
      store.get("RelationshipApproved", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get relationshipId(): Bytes {
    let value = this.get("relationshipId");
    return value!.toBytes();
  }

  set relationshipId(value: Bytes) {
    this.set("relationshipId", Value.fromBytes(value));
  }

  get firstHalf(): Bytes {
    let value = this.get("firstHalf");
    return value!.toBytes();
  }

  set firstHalf(value: Bytes) {
    this.set("firstHalf", Value.fromBytes(value));
  }

  get secondHalf(): Bytes {
    let value = this.get("secondHalf");
    return value!.toBytes();
  }

  set secondHalf(value: Bytes) {
    this.set("secondHalf", Value.fromBytes(value));
  }
}

export class RelationshipEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RelationshipEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RelationshipEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RelationshipEvent", id.toString(), this);
    }
  }

  static load(id: string): RelationshipEvent | null {
    return changetype<RelationshipEvent | null>(
      store.get("RelationshipEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get relationshipMemo(): string {
    let value = this.get("relationshipMemo");
    return value!.toString();
  }

  set relationshipMemo(value: string) {
    this.set("relationshipMemo", Value.fromString(value));
  }

  get ipfsURI(): string {
    let value = this.get("ipfsURI");
    return value!.toString();
  }

  set ipfsURI(value: string) {
    this.set("ipfsURI", Value.fromString(value));
  }

  get lover(): Bytes {
    let value = this.get("lover");
    return value!.toBytes();
  }

  set lover(value: Bytes) {
    this.set("lover", Value.fromBytes(value));
  }

  get relationshipId(): Bytes {
    let value = this.get("relationshipId");
    return value!.toBytes();
  }

  set relationshipId(value: Bytes) {
    this.set("relationshipId", Value.fromBytes(value));
  }
}

export class RelationshipProposed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RelationshipProposed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RelationshipProposed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RelationshipProposed", id.toString(), this);
    }
  }

  static load(id: string): RelationshipProposed | null {
    return changetype<RelationshipProposed | null>(
      store.get("RelationshipProposed", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get relationshipId(): Bytes {
    let value = this.get("relationshipId");
    return value!.toBytes();
  }

  set relationshipId(value: Bytes) {
    this.set("relationshipId", Value.fromBytes(value));
  }

  get firstHalf(): Bytes {
    let value = this.get("firstHalf");
    return value!.toBytes();
  }

  set firstHalf(value: Bytes) {
    this.set("firstHalf", Value.fromBytes(value));
  }

  get secondHalf(): Bytes {
    let value = this.get("secondHalf");
    return value!.toBytes();
  }

  set secondHalf(value: Bytes) {
    this.set("secondHalf", Value.fromBytes(value));
  }
}
